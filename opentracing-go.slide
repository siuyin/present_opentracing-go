Open Tracing
with Go
2 Sep 2017

Loh Siu Yin
Technology Consultant, Beyond Broadcast LLP
siuyin@beyondbroadcast.com

* OpenTracing

1 through 8 is a *trace*. *span* 1 - 8 records process start and end times.

.image images/trace.png 500 _

* Supported Languages
.image images/lang_support.png

* Components of a tracing system
Application --> Opentracing API --> tracer (eg. Jaeger)

.image images/jaeger.png 500 _

* Switchout to a different tracer
Application --> Opentracing API --> tracer (eg. Appdash. Clients: go and python)
.image images/appdash.png

* Hello World: A simple web app.
.play hello/main.go

* Open browser to localhost:8080

* Now lets trace it

* Start a tracer
Let's use sourcegraph's appdash tracer

  go get -u sourcegraph.com/sourcegraph/appdash/cmd/appdash

Run an appdash server.

  appdash serve --trace

Note the collector address:

  localhost:7701

* Instrument our web app with the opentracing API

.code trace01/main.go /010/,/020/

- Initialize the global opentracing tracer
- As an appdash opentracing tracer
- Pointing to a remote appdash collector

* Start a span
.code trace01/main.go /030/,/040/

- Start a span, name it "GET /req"
- Close the span by calling Finish()
- On execution, span is sent to the trace. Get trace ID from appdash trace log.

* Demo:

  appdash server --trace        # if not already running
  go run trace01/main.go

- Issue request from web app
- Look up trace ID from appdash trace log
- Review trace data on appdash tracer UI -- http://localhost:7700

* Distributed tracing
.code trace02/main.go /030/,/040/
- Call remote service on port 8081
- Inject span context into the request header

* Our worker service
.code trace02/work/main.go /010/,/020/

- Extract span context from request
- Start a child StartSpan
- Mark completion with Finish()

* dbQuery

.code trace02/work/main.go /030/,/040/

dbQuery:

- receives the parent span content via parameter sc
- starts its only child span


* Trace our two component system

  go run trace02/main.go
  go run trace02/work/main.go

- Issue a request on 8080
- Lookup trace ID from appdash trace log
- Note trace now includes the sub-spans on 8081

* What did we just see?
- We created a root span on 8080 when we triggered a request.
- We injected a span context into a http request header via opentracing.HTTPHeadersCarrier
- That request was carried over to 8081.
- On 8081 we extracted that span context and started a child span.
- The child span on 8081 passed its context to a local function which itself started a child span.
- Both 8080 and 8081 processes reported to the opentracing appdash collector via a opentracing tracer.

* Sending span contexts across process boundaries

opentracing defines two built in carriers.

HTTPHeadersCarrier:

  type HTTPHeadersCarrier http.Header

TextMapCarrier:

  type TextMapCarrier map[string]string

In previous examples we sent span contexts via REST calls using data injected into request http headers.

For the generic case we can send span contexts over the wire by serialising a map[string]string.

* Network DB query client request

.code trace03/work/main.go /010/,/020/

- inject span context into  map[string]string of type opentracing.TextMap
- serialize it for transmission over the wire

* Network DB server

.code trace03/work/main.go /030/,/040/

- deserialize bytes into map[string]string
- cast it to opentracing.TextMap
- extract span context from opentracing.TextMap

* Demo: HTTPHeadersCarrier and TextMapCarrier

        go run trace03/main.go
        go run trace03/work/main.go

- Issue a request on 8080
- Lookup trace ID from appdash trace log
- Note Net DB Query child span

* Span tags and logs

A *tag* is a label that is applicable to the whole span, i.e. the root span and all its children.

.code trace03/main.go /030/,/040/

* Span logs

A *log* is appropriate to record a time-stamped event.

.code trace03/work/main.go /030/,/040/

* Swaping out tracer appdash for jaeger

appdash
.code trace01/main.go /010/,020/

jaeger
.code trace-jaeger/main.go /010/,/011/

- imports are different

* Tracer initialisation: appdash

.code trace02/main.go /010/,/020/

- initilisation code points to an appdash collector

* Tracer initialisation: jaeger

.code trace-jaeger/main.go /012/,/013/
- jaeger is initialized via a jaeger configuration struct

* jaeger global tracer
.code trace-jaeger/main.go /014/,/015/

- jaeger's global tracer has a *service*name*: myWebApp in this case

* "port 8081" service trace initialization
.code trace-jaeger/work/main.go /011/,/012/
- the 8081 service is now known to jaeger as myWebSvc

* jaeger collector startup
- jaeger tracing is complex with storage in cassandra (default) or elasticsearch
- For testing purposes, an all-in-one docker image is available

  $ docker run -d --rm \
      -p 14267:14267 -p 16686:16686 \
      jaegertracing/all-in-one:latest

- Port 14267 is the jaeger collector
- Port 16686 is the jaeger UI


* jaeger agent

  go get -u github.com/uber/jaeger/cmd/agent
  cd $GOPATH/bin
  mv agent jaeger-agent

  $ jaeger-agent --collector.host-port=192.168.99.100:14267

- On my machine docker is running on 192.18.99.100

Important:

- applications connect via opentracing API to jaeger-client
- jaeger-client talks to jaeger-agent via UDP
- application and jaeger-agent must be on the same host. jaeger client API expects to see jaeger agent on localhost.

* Demo


Issue request

  http://127.0.0.1:8080

jaeger UI

  http://192.168.99.100:16686

Show:

- Service selection
- Trace details, tags, logs
- Service dependency map

* jaeger offline screenshots

* jaeger UI

.image images/jaeger-ui.png 500 _

- UI is accessed via web browser on port 16686

* Sample jaeger traces

.image images/jaeger-trace-sample.png 300 _

- Sortable: Most Recent, Longest First, Shortest First, Most Spans, Least Spans
- Service names displayed and colour coded

* jaeger trace details
.image images/jaeger-trace-details.png 400 _

right-click on image open in new tab to display full resolution

* Automatic service dependency graphing

.image images/jaeger-dependency.png _ 600

- myWebApp called myWebSvc 2 times

* Presentation and code download

.link https://github.com/siuyin/present_opentracing-go

For deployment on kubernetes see:

.link https://github.com/jaegertracing/jaeger-kubernetes
